# -*- coding: utf-8 -*-
"""Air quality forecasting model is a complex project 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zte3tvGUjLsURq_TtLUDXsONxXMPjJpT
"""



# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Generate sample air quality data
np.random.seed(0)
n_samples = 100
X = 2 * np.random.rand(n_samples, 1)  # Generate random features (e.g., temperature)
y = 5 + 2 * X + np.random.randn(n_samples, 1)  # Simulate air quality data with noise

# Create a DataFrame for data handling
data = pd.DataFrame({'Temperature': X[:, 0], 'AirQuality': y[:, 0]})

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data[['Temperature']], data['AirQuality'], test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Plot the regression line and data points
plt.scatter(data['Temperature'], data['AirQuality'], label='Actual Data')
plt.plot(X_test, y_pred, 'r-', label='Linear Regression Line', linewidth=2)
plt.xlabel('Temperature')
plt.ylabel('Air Quality')
plt.legend()
plt.title(f'MSE: {mse:.2f}, R-squared: {r2:.2f}')
plt.show()